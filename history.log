googol=2**2
googol
googol=2*2
googol
googol=10*100
print(googol*googol)
googol=10**100
print(googol*googol)
print("pupa", "dupa")
print('a'*4)
letters = 'abcdefghijklmnopqrstuvwxyz'
letters[1:2]
letters[0:1]
letters[10:]
crypto_list = ['Yeti', 'Bigfoot', 'Loch Ness Monster']
print(', '.join(crypto_list))
poem = '''All that doth flow we cannot liquid name
Or else would fire and water be the same;
But that is liquid which is moist and wet
Fire that property can never get.
Then 'tis not cold that doth the fire put out
But 'tis the wet that makes it die, no doubt.'''
len(poem)
poem.startswith('All')
poem.endswith('That\'s all, folks!')
word = 'the'
poem.find(word)
poem.rfind(word)
poem.count(word)
poem.isalnum()
setup = 'a duck goes into a bar...'
print(setup)
print(setup.strip('.'))
setup.capitalize()
setup.upper()
setup.lower()
setup.swapcase()
setup.replace('duck', 'marmoset')
setup.replace('a ', 'a famous ', 100)
tuple=1,2,3,4
map={"chef":"pupa"}
list=[1,2,4]
tuple=(1,2,3)
set={1,2,3,1}
for rabbit in rabbits:
...     print(rabbit)
for x in range(0,3):
...     print(x
number_list = []
>>> for number in range(1, 6):
...     number_list.append(number)
number_list = list(range(1, 6))
a_list = [number for number in range(1,6) if number % 2 == 1]
rows = range(1,4)
>>> cols = range(1,3)
>>> cells = [(row, col) for row in rows for col in cols]
>>> for cell in cells:
...     print(cell)
word = 'letters'
>>> letter_counts = {letter: word.count(letter) for letter in word}
word = 'letters'
>>> letter_counts = {letter: word.count(letter) for letter in set(word)}	
a_set = {number for number in range(1,6) if number % 3 == 1}
umber_thing = (number for number in range(1, 6))
def echo(anything):
...    return anything  ' '  anything
def commentary(color):
...     if color == 'red':
...         return "It's a tomato."
...     elif color == "green":
...         return "It's a green pepper."
...     elif color == 'bee purple':
...         return "I don't know what it is, but only bees can see it."
...     else:
...         return "I've never heard of the color "  color  "."
def menu(wine, entree, dessert):
...     return {'wine': wine, 'entree': entree, 'dessert': dessert}
menu(entree='beef', dessert='bagel', wine='bordeaux')

def menu(wine, entree, dessert='pudding'):
...     return {'wine': wine, 'entree': entree, 'dessert': dessert}
menu('chardonnay', 'chicken')
def print_args(*args):
...     print('Positional argument tuple:', args)
def print_more(required1, required2, *args):
...     print('Need this one:', required1)
...     print('Need this one too:', required2)
...     print('All the rest:', args)
def print_kwargs(**kwargs):
...     print('Keyword arguments:', kwargs)

def print_if_true(thing, check):
    '''
    Prints the first argument if a second argument is true.
    The operation is:
        1. Check whether the *second* argument is true.
        2. If it is, print the *first* argument.
    '''
    if check:
        print(thing)

def knights2(saying):
...     def inner2():
...         return "We are the knights who say: '%s'" % saying
...     return inner2
...

def edit_story(words, func):
...     for word in words:
...         print(func(word))

edit_story(stairs, lambda word: word.capitalize() + '!')
 sum(range(1, 101))

 def my_range(first=0, last=10, step=1):
...     number = first
...     while number < last:
...         yield number
...         number += step        

 def document_it(func):
...     def new_function(*args, **kwargs):
...         print('Running function:', func.__name__)
...         print('Positional arguments:', args)
...         print('Keyword arguments:', kwargs)
...         result = func(*args, **kwargs)
...         print('Result:', result)
...         return result
...     return new_function

@document_it
... def add_ints(a, b):
...     return a + b

 def square_it(func):
...     def new_function(*args, **kwargs):
...         result = func(*args, **kwargs)
...         return result * result
...     return new_function

@document_it
... @square_it
... def add_ints(a, b):
...     return a + b
...

 animal = 'fruitbat'
>>> def change_and_print_global():
...     global animal
...     animal = 'wombat'
...     print('inside change_and_print_global:', animal)

animal = 'fruitbat'
>>> def change_local():
...     animal = 'wombat'  # local variable
...     print('locals:', locals())

globals()

def amazing():
...     '''This is the amazing function.
...     Want to see it again?'''
...     print('This function is named:', amazing.__name__)
...     print('And its docstring is:', amazing.__doc__)

short_list = [1, 2, 3]
>>> position = 5
>>> try:
...     short_list[position]
... except:
...     print('Need a position between 0 and', len(short_list)-1, ' but got',
...            position)
...


short_list = [1, 2, 3]
>>> while True:
...     value = input('Position [q to quit]? ')
...     if value == 'q':
...         break
...     try:
...         position = int(value)
...         print(short_list[position])
...     except IndexError as err:
...         print('Bad index:', position)
...     except Exception as other:
...         print('Something else broke:', other)
...

class UppercaseException(Exception):
...     pass
...
>>> words = ['eeenie', 'meenie', 'miny', 'MO']
>>> for word in words:
...     if word.isupper():
...         raise UppercaseException(word)

import sys
print('Program arguments:', sys.argv)

#report.py

def get_description():  # see the docstring below?
    """Return random weather, just like the pros"""
    from random import choice
    possibilities = ['rain', 'snow', 'sleet', 'fog', 'sun', 'who knows']
    return choice(possibilities)

#weatherman.py
import report

description = report.get_description()
print("Today's weather:", description)

import report as wr
description = wr.get_description()
print("Today's weather:", description)    

from report import get_description as do_it
description = do_it()
print("Today's weather:", description)

import sys
>>> for place in sys.path:
...     print(place)

#boxes/weather.py
from sources import daily, weekly

print("Daily forecast:", daily.forecast())
print("Weekly forecast:")
for number, outlook in enumerate(weekly.forecast(), 1):
    print(number, outlook)

#boxes/sources/daily.py
def forecast():
    'fake daily forecast'
    return 'like yesterday'    

# boxes/sources/weekly.py
def forecast():
    """Fake weekly forecast"""
    return ['snow', 'more snow', 'sleet',
        'freezing rain', 'rain', 'fog', 'hail']

#__init__.py is needed in the sources folder       

periodic_table = {'Hydrogen': 1, 'Helium': 2}
carbon = periodic_table.setdefault('Carbon', 12)

from collections import defaultdict
periodic_table = defaultdict(int)

 from collections import defaultdict

 def no_idea():
...     return 'Huh?'
...
>>> bestiary = defaultdict(no_idea)
>>> bestiary['A'] = 'Abominable Snowman'
>>> bestiary['B'] = 'Basilisk'
>>> bestiary['A']

bestiary = defaultdict(lambda: 'Huh?')

from collections import Counter

breakfast = ['spam', 'spam', 'eggs', 'spam']
breakfast_counter = Counter(breakfast)

breakfast_counter.most_common()
breakfast_counter.most_common(1)

from collections import OrderedDict

quotes = OrderedDict([
...     ('Moe', 'A wise guy, huh?'),
...     ('Larry', 'Ow!'),
...     ('Curly', 'Nyuk nyuk!'),
...     ])

def palindrome(word):
...     from collections import deque
...     dq = deque(word)
...     while len(dq) > 1:
...        if dq.popleft() != dq.pop():
...            return False
...     return True

import itertools
>>> for item in itertools.chain([1, 2], ['a', 'b']):
...     print(item)

import itertools
>>> for item in itertools.cycle([1, 2]):
...     print(item)

import itertools
>>> for item in itertools.accumulate([1, 2, 3, 4]):
...     print(item)

import itertools
>>> def multiply(a, b):
...     return a * b
...
>>> for item in itertools.accumulate([1, 2, 3, 4], multiply):
...     print(item)

from pprint import pprint
>>> quotes = OrderedDict([
...     ('Moe', 'A wise guy, huh?'),
...     ('Larry', 'Ow!'),
...     ('Curly', 'Nyuk nyuk!'),
...     ])


pprint(quotes)
{'Moe': 'A wise guy, huh?',
 'Larry': 'Ow!',
 'Curly': 'Nyuk nyuk!'}


 class Person():
...     pass


class Person():
...     def __init__(self):
...         pass


hunter = Person('Elmer Fudd')

print('The mighty hunter: ', hunter.name)


class Car():
...     pass
...
>>> class Yugo(Car):
...     pass


class Car():
...     def exclaim(self):
...         print("I'm a Car!")
...
>>> class Yugo(Car):
...     def exclaim(self):
...         print("I'm a Yugo! Much like a Car, but more Yugo-ish.")

class Person():
...     def __init__(self, name):
...         self.name = name
...
>>> class MDPerson(Person):
...     def __init__(self, name):
...         self.name = "Doctor " + name
...
>>> class JDPerson(Person):
...     def __init__(self, name):
...         self.name = name + ", Esquire"


class Car():
...     def exclaim(self):
...         print("I'm a Car!")
...
>>> class Yugo(Car):
...     def exclaim(self):
...         print("I'm a Yugo! Much like a Car, but more Yugo-ish.")
...     def need_a_push(self):
...         print("A little help here?")


class Person():
...     def __init__(self, name):
...         self.name = name


class EmailPerson(Person):
...     def __init__(self, name, email):
...         super().__init__(name)
...         self.email = email


class Duck():
...     def __init__(self, input_name):
...         self.hidden_name = input_name
...     def get_name(self):
...         print('inside the getter')
...         return self.hidden_name
...     def set_name(self, input_name):
...         print('inside the setter')
...         self.hidden_name = input_name
...     name = property(get_name, set_name)

class Duck():
...     def __init__(self, input_name):
...         self.hidden_name = input_name
...     @property
...     def name(self):
...         print('inside the getter')
...         return self.hidden_name
...     @name.setter
...     def name(self, input_name):
...         print('inside the setter')
...         self.hidden_name = input_name


fowl = Duck('Howard')
>>> fowl.name
inside the getter
'Howard'

fowl.name = 'Donald'
inside the setter

fowl.name
inside the getter
'Donald'

class Circle():
...     def __init__(self, radius):
...         self.radius = radius
...     @property
...     def diameter(self):
...         return 2 * self.radius

c = Circle(5)
>>> c.radius
5

c.diameter
10



class Duck():
...     def __init__(self, input_name):
...         self.__name = input_name
...     @property
...     def name(self):
...         print('inside the getter')
...         return self.__name
...     @name.setter
...     def name(self, input_name):
...         print('inside the setter')
...         self.__name = input_name

fowl = Duck('Howard')
>>> fowl.name

fowl._Duck__name


class A():
...     count = 0
...     def __init__(self):
...         A.count += 1
...     def exclaim(self):
...         print("I'm an A!")
...     @classmethod
...     def kids(cls):
...         print("A has", cls.count, "little objects.")

easy_a = A()
>>> breezy_a = A()
>>> wheezy_a = A()
>>> A.kids()
A has 3 little objects.

class CoyoteWeapon():
...     @staticmethod
...     def commercial():
...         print('This CoyoteWeapon has been brought to you by Acme')
...
>>>
>>> CoyoteWeapon.commercial()
This CoyoteWeapon has been brought to you by Acme


class Quote():
...     def __init__(self, person, words):
...         self.person = person
...         self.words = words
...     def who(self):
...         return self.person
...     def says(self):
...         return self.words + '.'
...
>>> class QuestionQuote(Quote):
...      def says(self):
...          return self.words + '?'
...
>>> class ExclamationQuote(Quote):
...      def says(self):
...          return self.words + '!'


class Bill():
...     def __init__(self, description):
...         self.description = description
...
>>> class Tail():
...     def __init__(self, length):
...         self.length = length
...
>>> class Duck():
...     def __init__(self, bill, tail):
...         self.bill = bill
...         self.tail = tail
...     def about(self):
...         print('This duck has a', bill.description, 'bill and a',
                  tail.length, 'tail')
...
>>> tail = Tail('long')
>>> bill = Bill('wide orange')
>>> duck = Duck(bill, tail)
>>> duck.about()
This duck has a wide orange bill and a long tail

 from collections import namedtuple
>>> Duck = namedtuple('Duck', 'bill tail')
>>> duck = Duck('wide orange', 'long')
>>> duck
Duck(bill='wide orange', tail='long')
>>> duck.bill
'wide orange'
>>> duck.tail
'long'

parts = {'bill': 'wide orange', 'tail': 'long'}
>>> duck2 = Duck(**parts)
>>> duck2
Duck(bill='wide orange', tail='long')

duck3 = duck2._replace(tail='magnificent', bill='crushing')
>>> duck3
Duck(bill='crushing', tail='magnificent')